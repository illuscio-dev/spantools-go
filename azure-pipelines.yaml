name: build_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  # PIPELINE CONFIGURATION
  minimumCoverage: 0.85
  pythonVersion: '3.7'

  # NOT FOR CONFIGURATION
  # Go binaries path
  GOBIN:  '$(GOPATH)/bin'
  # Go installation path, we want to use go 1.13
  GOROOT: '/usr/local/go1.13'
  # Go workspace path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  # Path to the module's code
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'

trigger:
  batch: true
  branches:
    include:
      - dev
    exclude:
      - build_*
      - v*
      - master

pr:
  - dev

jobs:

- job: 'CI_CD'

  pool:
    vmImage: 'ubuntu-16.04'

  # Setup go environment
  steps: $(modulePath)/zdevelop/azure_templates/setup_go.yml

  - script: |
      go get -u github.com/illuscio-dev/docmodule-go
      go get -u golang.org/x/tools/cmd/godoc
      go get -u github.com/mgechev/revive
      go get -u github.com/jstemmer/go-junit-report
    displayName: 'Go get CLI tools'
    workingDirectory: /home

  - script: go get -v -t -d ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Go get dependencies'

  # Setup python environment
  - template: $(modulePath)/zdevelop/azure_templates/setup_python.yml

  # Run job
  - script: revive -config revive.toml ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Lint'

  - script: |
      mkdir ./reports
      set -o pipefail
      go test \
      -v \
      -covermode=count \
      -coverpkg=./... \
      -coverprofile=coverage.out \
      ./... \
      -minimum-coverage=$(minimumCoverage) \
      | tee ./reports/testResults.txt
    workingDirectory: '$(modulePath)'
    displayName: 'Run Tests'

  - script: cat ./reports/testResults.txt | go-junit-report > ./reports/tests_junit.xml
    condition: succeededOrFailed()
    workingDirectory: '$(modulePath)'
    displayName: 'Convert test report to junit'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: $(modulePath)/reports/tests_junit.xml
      failTaskOnFailedTests: true

  - task: PythonScript@0
    displayName: 'get release version'
    inputs:
      scriptSource: filePath
      scriptPath: '$(modulePath)/zdevelop/azure_scripts/get_release_version.py'
      failOnStderr: true

  - script: echo $(RELEASE_VERSION)
    displayName: 'debug release version'